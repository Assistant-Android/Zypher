import { useState } from 'react';
import { Upload, Download, FileText, TrendingUp } from 'lucide-react';
import type { Planet, CategoryCard } from './BatchTypes';

interface BackendDataPoint {
  probability: number;
  orbital_period?: number;
  transit_duration?: number;
  planet_radius?: number;
  stellar_mass?: number;
  temperature?: number;
  distance?: number;
}

interface BackendData {
  [key: string]: BackendDataPoint;
}

const categories = [
  {
    name: 'Water Worlds',
    filter: (p: Planet) => p.characteristics.water,
    color: 'blue',
    icon: '💧'
  },
  {
    name: 'Oxygen Rich',
    filter: (p: Planet) => p.characteristics.oxygen,
    color: 'cyan',
    icon: '🌬️'
  },
  {
    name: 'Rocky Planets',
    filter: (p: Planet) => p.characteristics.rocks,
    color: 'amber',
    icon: '🪨'
  },
  {
    name: 'Forest Planets',
    filter: (p: Planet) => p.characteristics.forest,
    color: 'green',
    icon: '🌳'
  },
  {
    name: 'Hydrogen Giants',
    filter: (p: Planet) => p.characteristics.hydrogen,
    color: 'violet',
    icon: '⚛️'
  },
  {
    name: 'Radiation Zones',
    filter: (p: Planet) => p.characteristics.radiation,
    color: 'red',
    icon: '☢️'
  },
  {
    name: 'Atmospheric',
    filter: (p: Planet) => p.characteristics.atmosphere,
    color: 'indigo',
    icon: '🌫️'
  },
  {
    name: 'Magnetic Fields',
    filter: (p: Planet) => p.characteristics.magnetic_field,
    color: 'purple',
    icon: '🧲'
  }
];

const generatePlanet = (name: string, data: BackendDataPoint): Planet => {
  const probability = data.probability;
  
  return {
    name,
    probability,
    characteristics: {
      water: probability > 0.5,
      oxygen: probability > 0.6,
      rocks: probability > 0.3,
      forest: probability > 0.7,
      hydrogen: probability > 0.4,
      radiation: probability > 0.6,
      atmosphere: probability > 0.5,
      magnetic_field: probability > 0.6
    },
    data: {
      orbital_period: Number((data.orbital_period || Math.random() * 1000).toFixed(2)),
      transit_duration: Number((data.transit_duration || Math.random() * 20).toFixed(2)),
      planet_radius: Number((data.planet_radius || Math.random() * 5).toFixed(2)),
      stellar_mass: Number((data.stellar_mass || Math.random() * 2).toFixed(2)),
      temperature: Number((data.temperature || Math.random() * 500 - 100).toFixed(2)),
      distance: Number((data.distance || Math.random() * 1000).toFixed(2))
    }
  };
};

const convertBackendData = (data: BackendData): Planet[] => {
  return Object.entries(data).map(([key, value]) => generatePlanet(key, value));
};

export default function BatchAnalysis() {
  const [file, setFile] = useState<File | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [planets, setPlanets] = useState<Planet[] | null>(null);
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
  const [categoryCards, setCategoryCards] = useState<CategoryCard[]>([]);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setFile(e.target.files[0]);
      setPlanets(null);
      setSelectedCategory(null);
      setCategoryCards([]);
      setError(null);
    }
  };

  const checkServerHealth = async () => {
    try {
      const response = await fetch('http://localhost:8000/health');
      if (!response.ok) return false;
      const data = await response.json();
      return data.status === 'ok';
    } catch (error) {
      return false;
    }
  };

  const handleAnalyze = async () => {
    if (!file) {
      setError('Please select a file first');
      return;
    }

    setLoading(true);
    setError(null);

    try {
      // Check server health
      const isHealthy = await checkServerHealth();
      if (!isHealthy) {
        throw new Error('Cannot connect to server. Please ensure the backend is running.');
      }

      // Upload file
      const formData = new FormData();
      formData.append('file', file);

      const uploadResponse = await fetch('http://localhost:8000/upload-file', {
        method: 'POST',
        body: formData,
      });

      if (!uploadResponse.ok) {
        const errorData = await uploadResponse.json().catch(() => null);
        throw new Error(errorData?.detail || 'Failed to upload file');
      }

      // Retrain model
      const retrainResponse = await fetch('http://localhost:8000/retrain', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      if (!retrainResponse.ok) {
        const errorData = await retrainResponse.json().catch(() => null);
        throw new Error(errorData?.detail || 'Analysis failed');
      }

      const result = await retrainResponse.json();
      console.log('Analysis result:', result);

      // Process backend data
      const processedPlanets = convertBackendData(result.data || {});
      setPlanets(processedPlanets);
      
      // Update category cards
      const newCards = categories.map(cat => ({
        name: cat.name,
        count: processedPlanets.filter(cat.filter).length,
        icon: cat.icon,
        color: cat.color,
        planets: processedPlanets.filter(cat.filter)
      }));
      
      setCategoryCards(newCards);
    } catch (err) {
      console.error('Analysis failed:', err);
      setError(err instanceof Error ? err.message : 'Failed to analyze the file');
    } finally {
      setLoading(false);
    }
  };

  const handleCategoryChange = (categoryName: string) => {
    if (!planets) return;
    setSelectedCategory(selectedCategory === categoryName ? null : categoryName);
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto px-4 py-8">
        <div className="bg-white rounded-2xl p-8 shadow-sm border border-gray-200">
          <div className="flex items-center gap-4 mb-8">
            <div className="p-3 bg-purple-50 rounded-xl">
              <FileText className="w-8 h-8 text-purple-500" strokeWidth={1.5} />
            </div>
            <div>
              <h2 className="text-2xl font-semibold text-gray-900">Batch Analysis</h2>
              <p className="text-gray-500">Upload a CSV file to analyze multiple planets</p>
            </div>
          </div>

          {error && (
            <div className="mb-4 p-4 bg-red-50 border border-red-200 rounded-lg text-red-700">
              <p className="flex items-center">
                <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd"/>
                </svg>
                {error}
              </p>
            </div>
          )}

          <div className="mb-8">
            <label className="flex flex-col items-center justify-center w-full h-64 border-2 border-dashed border-gray-300 rounded-2xl cursor-pointer hover:border-gray-400 hover:bg-gray-100 transition-all bg-white">
              <div className="flex flex-col items-center justify-center pt-5 pb-6">
                <Upload className="w-12 h-12 mb-4 text-gray-400" strokeWidth={1.5} />
                <p className="mb-2 text-base font-medium text-gray-900">
                  {file ? file.name : 'Click to upload CSV file'}
                </p>
                <p className="text-sm text-gray-500">CSV files only</p>
              </div>
              <input
                type="file"
                accept=".csv"
                className="hidden"
                onChange={handleFileChange}
              />
            </label>
          </div>

          <div className="flex justify-between items-center">
            <button
              onClick={handleAnalyze}
              disabled={!file || loading}
              className={`flex items-center px-6 py-3 rounded-xl text-white font-medium ${
                !file || loading
                  ? 'bg-gray-400 cursor-not-allowed'
                  : 'bg-purple-600 hover:bg-purple-700'
              }`}
            >
              {loading ? (
                <>
                  <div className="w-5 h-5 border-t-2 border-white rounded-full animate-spin mr-2"></div>
                  Analyzing...
                </>
              ) : (
                <>
                  <TrendingUp className="w-5 h-5 mr-2" />
                  Analyze Data
                </>
              )}
            </button>

            <button
              onClick={() => {/* Add download functionality */}}
              className="flex items-center px-6 py-3 rounded-xl text-gray-700 font-medium hover:bg-gray-100"
            >
              <Download className="w-5 h-5 mr-2" />
              Download Template
            </button>
          </div>

          {categoryCards.length > 0 && (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mt-8">
              {categoryCards.map((card) => {
                const isSelected = selectedCategory === card.name;
                return (
                  <div
                    key={card.name}
                    onClick={() => handleCategoryChange(card.name)}
                    className={`relative bg-white rounded-2xl p-6 border cursor-pointer transition-all ${
                      isSelected
                        ? 'border-purple-500 shadow-md ring-2 ring-purple-500 ring-opacity-50'
                        : 'border-gray-200 hover:border-purple-500 hover:shadow-md'
                    }`}
                  >
                    <div className="flex items-center gap-4">
                      <div className={`text-4xl bg-${card.color}-50 p-3 rounded-xl`}>
                        {card.icon}
                      </div>
                      <div>
                        <h3 className="text-lg font-semibold text-gray-900">{card.name}</h3>
                        <p className="text-sm text-gray-500">{card.count} planets</p>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}